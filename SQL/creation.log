SQL> 
SQL> @creation_tables.sql
SQL> REM CREATION DES TABLES
SQL> 
SQL> CREATE TABLE JOUEUR(
  2  	NoJoueur						INTEGER			NOT NULL,
  3  	Courriel						VARCHAR2(256)	NOT NULL,
  4  	Surnom							VARCHAR2(50)	NOT NULL,
  5  	Miniature						BLOB,
  6  	Nom								VARCHAR2(100),
  7  	Prenom							VARCHAR2(100),
  8  	Actif							CHAR(1)
  9  );

Table JOUEUR created.

SQL> 
SQL> CREATE TABLE ESRB(
  2  	Code							CHAR(1)			NOT NULL,
  3  	Description						VARCHAR2(50)	NOT NULL
  4  );

Table ESRB created.

SQL> 
SQL> CREATE TABLE GENRE(
  2  	Code							CHAR(3)			NOT NULL,
  3  	Description						VARCHAR2(50)	NOT NULL,
  4  	CodeGenreParent					CHAR(3)			NOT NULL
  5  );

Table GENRE created.

SQL> 
SQL> CREATE TABLE SOUS_GENRE_JEU(
  2  	CodeSousGenre					CHAR(3)			NOT NULL,
  3  	IdJeu							INTEGER			NOT NULL
  4  );

Table SOUS_GENRE_JEU created.

SQL> 
SQL> CREATE TABLE JEU(
  2  	IdJeu							INTEGER			NOT NULL,
  3  	Nom								VARCHAR2(100)	NOT NULL,
  4  	Description						VARCHAR2(256)	NOT NULL,
  5  	CodeESRB						CHAR(1),
  6  	CodeGenre						CHAR(3)
  7  );

Table JEU created.

SQL> 
SQL> CREATE TABLE CONTENU(
  2  	IdContenu						INTEGER			NOT NULL,
  3  	Nom								VARCHAR2(100)	NOT NULL,
  4  	Description						VARCHAR2(256)	NOT NULL,
  5  	DateSortie						DATE,
  6  	TypeContenu						VARCHAR2(1)		NOT NULL,
  7  	IdJeu							INTEGER			NOT NULL	
  8  );

Table CONTENU created.

SQL> 
SQL> CREATE TABLE CONTENU_POSSEDE(
  2  	IdContenu						INTEGER			NOT NULL,
  3  	NoJoueur						INTEGER			NOT NULL
  4  );

Table CONTENU_POSSEDE created.

SQL> 
SQL> CREATE TABLE SUCCES(
  2  	IdSucces						INTEGER			NOT NULL,
  3  	Titre							VARCHAR2(50)	NOT NULL,
  4  	Description						VARCHAR2(256),
  5  	Image							BLOB,
  6  	Valeur							NUMBER(3,0),
  7  	IdContenu						INTEGER			NOT NULL	
  8  );

Table SUCCES created.

SQL> 
SQL> CREATE TABLE SUCCES_CALCULE(
  2  	IdSucces						INTEGER			NOT NULL,
  3  	MaximumRequis					NUMBER(3,0)		NOT NULL
  4  );

Table SUCCES_CALCULE created.

SQL> 
SQL> CREATE TABLE SUCCES_REALISE(
  2  	IdContenu						INTEGER			NOT NULL,
  3  	NoJoueur						INTEGER			NOT NULL,
  4  	IdSucces						INTEGER			NOT NULL
  5  );

Table SUCCES_REALISE created.

SQL> 
SQL> CREATE TABLE SUCCES_EN_COURS(
  2  	IdContenu						INTEGER			NOT NULL,
  3  	NoJoueur						INTEGER			NOT NULL,
  4  	IdSucces						INTEGER			NOT NULL,
  5  	Compteur						NUMBER(3,0)		NOT NULL
  6  );

Table SUCCES_EN_COURS created.

SQL> 
SQL> 
SQL> CREATE TABLE FORFAIT(
  2  	Code							CHAR(5)			NOT NULL,
  3  	Nom								VARCHAR2(100),
  4  	Description						VARCHAR2(1000)
  5  );

Table FORFAIT created.

SQL> 
SQL> CREATE TABLE PERIODE(
  2  	IdPeriode						INTEGER			NOT NULL,
  3  	DateDebut						DATE			NOT NULL,
  4  	DateFin							DATE			NOT NULL,
  5  	Prix							NUMBER (6,2)	NOT NULL,
  6  	CodeForfait						CHAR(5)			NOT NULL
  7  );

Table PERIODE created.

SQL> 
SQL> CREATE TABLE PERIODE_FORFAIT_JOUEUR(
  2  	IdPeriode						INTEGER			NOT NULL,
  3  	NoJoueur						INTEGER			NOT NULL,
  4  	DateAchat						DATE			NOT NULL
  5  );

Table PERIODE_FORFAIT_JOUEUR created.

SQL> 
SQL> CREATE TABLE RESEAU(
  2  	Code							CHAR(6)			NOT NULL,
  3  	Nom								VARCHAR2(50)	NOT NULL,
  4  	Description						VARCHAR2(100)	NOT NULL,
  5  	Actif							VARCHAR2(1)		NOT NULL
  6  );

Table RESEAU created.

SQL> 
SQL> CREATE TABLE ABONNEMENT_RESEAU(
  2  	CodeReseau						CHAR(6)			NOT NULL,
  3  	NoJoueur						INTEGER			NOT NULL
  4  );

Table ABONNEMENT_RESEAU created.

SQL> 
SQL> CREATE TABLE SUIVI_RESEAU(
  2  	IdSuivi							INTEGER			NOT NULL,
  3  	Moment							TIMESTAMP		NOT NULL,
  4  	CodeReseau						CHAR(6)			NOT NULL,
  5  	DateSuivi						DATE			NOT NULL,
  6  	Action							CHAR(3)			NOT NULL,
  7  	NoJoueur						INTEGER
  8  );

Table SUIVI_RESEAU created.

SQL> 
SQL> CREATE TABLE AMI(
  2  	NoJoueurInvitant				INTEGER			NOT NULL,	
  3  	NoJoueurInvite					INTEGER			NOT NULL,	
  4  	DateDebut						DATE,
  5  	CodeStatut						CHAR(3)			NOT NULL	
  6  );

Table AMI created.

SQL> 
SQL> CREATE TABLE STATUT_AMITIE(
  2  	CodeStatut						CHAR(3)			NOT NULL,
  3  	Description						VARCHAR2(25)	NOT NULL	
  4  );

Table STATUT_AMITIE created.

SQL> 
SQL> CREATE TABLE SUIVI_AMITIE(
  2  	IdSuivi							INTEGER			NOT NULL,
  3  	Moment							TIMESTAMP		NOT NULL,
  4  	NoJoueurInvitant				INTEGER			NOT NULL,	
  5  	NoJoueurInvite					INTEGER			NOT NULL,	
  6  	DateSuivi						DATE			NOT NULL,
  7  	CodeStatut						CHAR(3)			NOT NULL
  8  );

Table SUIVI_AMITIE created.

SQL> @creation_contraintes.sql
SQL> REM CLÉS PRIMAIRES (PK)
SQL> 
SQL> ALTER TABLE JOUEUR
  2  	ADD CONSTRAINT JOUEUR_PK
  3  	PRIMARY KEY (NoJoueur)	
  4  	USING INDEX;

Table JOUEUR altered.

SQL> 
SQL> ALTER TABLE ESRB
  2  	ADD CONSTRAINT ESRB_PK
  3  	PRIMARY KEY (Code)	
  4  	USING INDEX;

Table ESRB altered.

SQL> 
SQL> ALTER TABLE GENRE
  2  	ADD CONSTRAINT GENRE_PK
  3  	PRIMARY KEY (Code)	
  4  	USING INDEX;

Table GENRE altered.

SQL> 
SQL> ALTER TABLE SOUS_GENRE_JEU
  2  	ADD CONSTRAINT SOUS_GENRE_JEU_PK
  3  	PRIMARY KEY (CodeSousGenre, IdJeu)	
  4  	USING INDEX;

Table SOUS_GENRE_JEU altered.

SQL> 
SQL> ALTER TABLE JEU
  2  	ADD CONSTRAINT JEU_PK
  3  	PRIMARY KEY (IdJeu)	
  4  	USING INDEX;

Table JEU altered.

SQL> 
SQL> ALTER TABLE CONTENU
  2  	ADD CONSTRAINT CONTENU_PK
  3  	PRIMARY KEY (IdContenu)	
  4  	USING INDEX;

Table CONTENU altered.

SQL> 
SQL> ALTER TABLE CONTENU_POSSEDE
  2  	ADD CONSTRAINT CONTENU_POSSEDE_PK
  3  	PRIMARY KEY (IdContenu, NoJoueur)	
  4  	USING INDEX;

Table CONTENU_POSSEDE altered.

SQL> 
SQL> ALTER TABLE SUCCES
  2  	ADD CONSTRAINT SUCCES_PK
  3  	PRIMARY KEY (IdSucces)	
  4  	USING INDEX;

Table SUCCES altered.

SQL> 
SQL> ALTER TABLE SUCCES_CALCULE
  2  	ADD CONSTRAINT SUCCES_CALCULE_PK
  3  	PRIMARY KEY (IdSucces)	
  4  	USING INDEX;

Table SUCCES_CALCULE altered.

SQL> 
SQL> ALTER TABLE SUCCES_REALISE
  2  	ADD CONSTRAINT SUCCES_REALISE_PK
  3  	PRIMARY KEY (IdContenu, NoJoueur, IdSucces)	
  4  	USING INDEX;

Table SUCCES_REALISE altered.

SQL> 
SQL> ALTER TABLE SUCCES_EN_COURS
  2  	ADD CONSTRAINT SUCCES_EN_COURS_PK
  3  	PRIMARY KEY (IdContenu, NoJoueur, IdSucces)	
  4  	USING INDEX;

Table SUCCES_EN_COURS altered.

SQL> 
SQL> ALTER TABLE FORFAIT
  2  	ADD CONSTRAINT FORFAIT_PK
  3  	PRIMARY KEY (Code)	
  4  	USING INDEX;

Table FORFAIT altered.

SQL> 
SQL> ALTER TABLE PERIODE
  2  	ADD CONSTRAINT PERIODE_PK
  3  	PRIMARY KEY (IdPeriode)	
  4  	USING INDEX;

Table PERIODE altered.

SQL> 
SQL> ALTER TABLE PERIODE_FORFAIT_JOUEUR
  2  	ADD CONSTRAINT PERIODE_FORFAIT_JOUEUR_PK
  3  	PRIMARY KEY (IdPeriode, NoJoueur)
  4  	USING INDEX;

Table PERIODE_FORFAIT_JOUEUR altered.

SQL> 
SQL> ALTER TABLE RESEAU
  2  	ADD CONSTRAINT RESEAU_PK
  3  	PRIMARY KEY (Code)	
  4  	USING INDEX;

Table RESEAU altered.

SQL> 
SQL> ALTER TABLE ABONNEMENT_RESEAU
  2  	ADD CONSTRAINT ABONNEMENT_RESEAU_PK
  3  	PRIMARY KEY (CodeReseau, NoJoueur)	
  4  	USING INDEX;

Table ABONNEMENT_RESEAU altered.

SQL> 
SQL> ALTER TABLE SUIVI_RESEAU
  2  	ADD CONSTRAINT SUIVI_RESEAU_PK
  3  	PRIMARY KEY (IdSuivi)	
  4  	USING INDEX;

Table SUIVI_RESEAU altered.

SQL> 
SQL> ALTER TABLE AMI
  2  	ADD CONSTRAINT AMI_PK
  3  	PRIMARY KEY (NoJoueurInvitant, NoJoueurInvite)	
  4  	USING INDEX;

Table AMI altered.

SQL> 
SQL> ALTER TABLE STATUT_AMITIE
  2  	ADD CONSTRAINT STATUT_AMITIE_PK
  3  	PRIMARY KEY (CodeStatut)	
  4  	USING INDEX;

Table STATUT_AMITIE altered.

SQL> 
SQL> ALTER TABLE SUIVI_AMITIE
  2  	ADD CONSTRAINT SUIVI_AMITIE_PK
  3  	PRIMARY KEY (IdSuivi)	
  4  	USING INDEX;

Table SUIVI_AMITIE altered.

SQL> 
SQL> 
SQL> REM CLÉS ÉTRANGÈRES (FK)
SQL> 
SQL> ALTER TABLE GENRE
  2  	ADD CONSTRAINT GENRE_FK
  3  	FOREIGN KEY (CodeGenreParent)
  4  	REFERENCES GENRE (Code);

Table GENRE altered.

SQL> 
SQL> ALTER TABLE SOUS_GENRE_JEU
  2  	ADD CONSTRAINT SOUS_GENRE_JEU_SOUS_GENRE_FK
  3  	FOREIGN KEY (CodeSousGenre)
  4  	REFERENCES GENRE (Code);

Table SOUS_GENRE_JEU altered.

SQL> 
SQL> ALTER TABLE SOUS_GENRE_JEU
  2  	ADD CONSTRAINT SOUS_GENRE_JEU_ID_JEU_FK
  3  	FOREIGN KEY (IdJeu)
  4  	REFERENCES JEU (IdJeu);

Table SOUS_GENRE_JEU altered.

SQL> 
SQL> ALTER TABLE JEU
  2  	ADD CONSTRAINT JEU_CODE_ESRB_FK
  3  	FOREIGN KEY (CodeESRB)
  4  	REFERENCES ESRB (Code);

Table JEU altered.

SQL> 
SQL> ALTER TABLE JEU
  2  	ADD CONSTRAINT JEU_CODE_GENRE_FK
  3  	FOREIGN KEY (CodeGenre)
  4  	REFERENCES GENRE (Code);

Table JEU altered.

SQL> 
SQL> ALTER TABLE CONTENU
  2  	ADD CONSTRAINT CONTENU_FK
  3  	FOREIGN KEY (IdJeu)
  4  	REFERENCES JEU (IdJeu);

Table CONTENU altered.

SQL> 
SQL> ALTER TABLE CONTENU_POSSEDE
  2  	ADD CONSTRAINT CONTENU_POSSEDE_ID_CONTENU_FK
  3  	FOREIGN KEY (IdContenu)
  4  	REFERENCES Contenu (IdContenu);

Table CONTENU_POSSEDE altered.

SQL> 
SQL> ALTER TABLE CONTENU_POSSEDE
  2  	ADD CONSTRAINT CONTENU_POSSEDE_NO_JOUEUR_FK
  3  	FOREIGN KEY (NoJoueur)
  4  	REFERENCES Joueur (NoJoueur);

Table CONTENU_POSSEDE altered.

SQL> 
SQL> ALTER TABLE SUCCES
  2  	ADD CONSTRAINT SUCCES_FK
  3  	FOREIGN KEY (IdContenu)
  4  	REFERENCES CONTENU (IdContenu);

Table SUCCES altered.

SQL> 
SQL> ALTER TABLE SUCCES_CALCULE
  2  	ADD CONSTRAINT SUCCES_CALCULE_FK
  3  	FOREIGN KEY (IdSucces)
  4  	REFERENCES SUCCES (IdSucces);

Table SUCCES_CALCULE altered.

SQL> 
SQL> ALTER TABLE SUCCES_REALISE
  2  	ADD CONSTRAINT SUCCES_REALISE_ID_SUCCES_FK
  3  	FOREIGN KEY (IdSucces)
  4  	REFERENCES SUCCES (IdSucces);

Table SUCCES_REALISE altered.

SQL> 
SQL> ALTER TABLE SUCCES_REALISE
  2  	ADD CONSTRAINT SUCCES_REALISE_CONTENU_FK
  3  	FOREIGN KEY (IdContenu, NoJoueur)
  4  	REFERENCES CONTENU_POSSEDE (IdContenu, NoJoueur);

Table SUCCES_REALISE altered.

SQL> 
SQL> ALTER TABLE SUCCES_EN_COURS
  2  	ADD CONSTRAINT SUCCES_EN_COURS_ID_SUCCES_FK
  3  	FOREIGN KEY (IdSucces)
  4  	REFERENCES SUCCES_CALCULE (IdSucces);

Table SUCCES_EN_COURS altered.

SQL> 
SQL> ALTER TABLE SUCCES_EN_COURS
  2  	ADD CONSTRAINT SUCCES_EN_COURS_CONTENU_FK
  3  	FOREIGN KEY (IdContenu, NoJoueur)
  4  	REFERENCES CONTENU_POSSEDE (IdContenu, NoJoueur);

Table SUCCES_EN_COURS altered.

SQL> 
SQL> ALTER TABLE PERIODE
  2  	ADD CONSTRAINT PERIODE_FK
  3  	FOREIGN KEY (CodeForfait)
  4  	REFERENCES FORFAIT (Code);

Table PERIODE altered.

SQL> 
SQL> ALTER TABLE PERIODE_FORFAIT_JOUEUR
  2  	ADD CONSTRAINT PERIODE_FORF_J_ID_PERIODE_FK
  3  	FOREIGN KEY (IdPeriode)
  4  	REFERENCES PERIODE (IdPeriode);

Table PERIODE_FORFAIT_JOUEUR altered.

SQL> 
SQL> ALTER TABLE PERIODE_FORFAIT_JOUEUR
  2  	ADD CONSTRAINT PERIODE_FORF_J_NO_JOUEUR_FK
  3  	FOREIGN KEY (NoJoueur)
  4  	REFERENCES JOUEUR (NoJoueur);

Table PERIODE_FORFAIT_JOUEUR altered.

SQL> 
SQL> ALTER TABLE ABONNEMENT_RESEAU
  2  	ADD CONSTRAINT ABONNEMENT_CODE_RESEAU_FK
  3  	FOREIGN KEY (CodeReseau)
  4  	REFERENCES RESEAU (Code);

Table ABONNEMENT_RESEAU altered.

SQL> 
SQL> ALTER TABLE ABONNEMENT_RESEAU
  2  	ADD CONSTRAINT ABONNEMENT_NO_JOUEUR_FK
  3  	FOREIGN KEY (NoJoueur)
  4  	REFERENCES JOUEUR (NoJoueur);

Table ABONNEMENT_RESEAU altered.

SQL> 
SQL> ALTER TABLE SUIVI_RESEAU
  2  	ADD CONSTRAINT SUIVI_RESEAU_CODE_RESEAU_FK
  3  	FOREIGN KEY (CodeReseau)
  4  	REFERENCES RESEAU (Code);

Table SUIVI_RESEAU altered.

SQL> 
SQL> ALTER TABLE SUIVI_RESEAU
  2  	ADD CONSTRAINT SUIVI_RESEAU_NO_JOUEUR_FK
  3  	FOREIGN KEY (NoJoueur)
  4  	REFERENCES JOUEUR (NoJoueur);

Table SUIVI_RESEAU altered.

SQL> 
SQL> ALTER TABLE AMI 
  2  	ADD CONSTRAINT AMI_CODE_STATUT_FK
  3  	FOREIGN KEY (CodeStatut)
  4  	REFERENCES STATUT_AMITIE (CodeStatut);

Table AMI altered.

SQL> 
SQL> ALTER TABLE AMI
  2  	ADD CONSTRAINT AMI_NO_JOUEUR_INVITANT_FK
  3  	FOREIGN KEY (NoJoueurInvitant)
  4  	REFERENCES JOUEUR (NoJoueur);

Table AMI altered.

SQL> 
SQL> ALTER TABLE AMI
  2  	ADD CONSTRAINT AMI_NO_JOUEUR_INVITE_FK
  3  	FOREIGN KEY (NoJoueurInvite)
  4  	REFERENCES JOUEUR (NoJoueur);

Table AMI altered.

SQL> 
SQL> ALTER TABLE SUIVI_AMITIE
  2  	ADD CONSTRAINT SUIVI_AMI_NO_J_INVITANT_FK
  3  	FOREIGN KEY (NoJoueurInvitant)
  4  	REFERENCES JOUEUR (NoJoueur);

Table SUIVI_AMITIE altered.

SQL> 
SQL> ALTER TABLE SUIVI_AMITIE
  2  	ADD CONSTRAINT SUIVI_AMI_NO_J_INVITE_FK
  3  	FOREIGN KEY (NoJoueurInvite)
  4  	REFERENCES JOUEUR (NoJoueur);

Table SUIVI_AMITIE altered.

SQL> 
SQL> ALTER TABLE SUIVI_AMITIE
  2  	ADD CONSTRAINT SUIVI_AMITIE_CODE_STATUT_FK
  3  	FOREIGN KEY (CodeStatut)
  4  	REFERENCES STATUT_AMITIE (CodeStatut);

Table SUIVI_AMITIE altered.

SQL> 
SQL> 
SQL> REM Champs UNIQUE
SQL> 
SQL> ALTER TABLE JOUEUR
  2  	ADD CONSTRAINT JOUEUR_UNIQUE UNIQUE (Courriel, Surnom);

Table JOUEUR altered.

SQL> 
SQL> 
SQL> REM Listes des constraintes (CHECK CONSTRAINT)
SQL> 
SQL> ALTER TABLE CONTENU
  2  	ADD CONSTRAINT CHECK_CONTENU_TYPE CHECK (
  3  		TypeContenu IN ('J', 'D', 'O')
  4  	);

Table CONTENU altered.

SQL> 
SQL> ALTER TABLE JOUEUR
  2  	ADD CONSTRAINT CHECK_JOUEUR_ACTIF CHECK (
  3  		Actif IN ('1', '0')
  4  	);

Table JOUEUR altered.

SQL> 
SQL> ALTER TABLE RESEAU
  2  	ADD CONSTRAINT CHECK_RESEAU_ACTIF CHECK (
  3  		Actif IN ('1', '0')
  4  	);

Table RESEAU altered.

SQL> 
SQL> ALTER TABLE SUIVI_RESEAU
  2  	ADD CONSTRAINT CHECK_SUIVI_RESEAU_ACTION CHECK (
  3  		Action IN ('CRE', 'SUP', 'ACT', 'DES', 'ABO', 'DSA')
  4  	);

Table SUIVI_RESEAU altered.

SQL> REM 'CREATION RESEAU', 'SUPPRESSION RESEAU', 
SQL> REM 'ACTIVATION RESEAU', 'DESACTIVATION RESEAU', 
SQL> REM 'ABONNEMENT JOUEUR', 'DESABONNEMENT JOUEUR'
SQL> 
SQL> ALTER TABLE SUCCES
  2  	ADD CONSTRAINT CHECK_SUCCES_VALEUR CHECK (Valeur > 0);

Table SUCCES altered.

SQL> 
SQL> ALTER TABLE SUCCES_CALCULE
  2  	ADD CONSTRAINT CHECK_SUCCES_C_MAX_REQUIS CHECK (MaximumRequis > 0);

Table SUCCES_CALCULE altered.

SQL> 
SQL> ALTER TABLE SUCCES_EN_COURS
  2  	ADD CONSTRAINT CHECK_SUCCES_EN_COURS_COMPTEUR CHECK (Compteur > 0);

Table SUCCES_EN_COURS altered.

SQL> 
SQL> ALTER TABLE PERIODE
  2  	ADD CONSTRAINT CHECK_PERIODE_PRIX CHECK (Prix >= 0);

Table PERIODE altered.

SQL> 
SQL> 
SQL> REM Valeurs par défaut
SQL> 
SQL> ALTER TABLE SUCCES_EN_COURS
  2    MODIFY (Compteur DEFAULT 0);

Table SUCCES_EN_COURS altered.

SQL> 
SQL> ALTER TABLE PERIODE_FORFAIT_JOUEUR
  2    MODIFY (DateAchat DEFAULT SysDate);

Table PERIODE_FORFAIT_JOUEUR altered.

SQL> 
SQL> ALTER TABLE JOUEUR
  2    MODIFY (Actif DEFAULT '1');

Table JOUEUR altered.

SQL> 
SQL> ALTER TABLE RESEAU
  2    MODIFY (Actif DEFAULT '1');

Table RESEAU altered.

SQL> 
SQL> ALTER TABLE RESEAU
  2    MODIFY (Actif DEFAULT '1');

Table RESEAU altered.

SQL> 
SQL> ALTER TABLE SUIVI_RESEAU
  2    MODIFY (Moment DEFAULT CURRENT_TIMESTAMP);

Table SUIVI_RESEAU altered.

SQL> 
SQL> ALTER TABLE SUIVI_AMITIE
  2    MODIFY (Moment DEFAULT CURRENT_TIMESTAMP);

Table SUIVI_AMITIE altered.

SQL> 
SQL> 
SQL> REM Séquences
SQL> 
SQL> CREATE SEQUENCE JEU_SEQ;

Sequence JEU_SEQ created.

SQL> CREATE SEQUENCE CONTENU_SEQ;

Sequence CONTENU_SEQ created.

SQL> CREATE SEQUENCE SUCCES_SEQ;

Sequence SUCCES_SEQ created.

SQL> CREATE SEQUENCE PERIODE_SEQ;

Sequence PERIODE_SEQ created.

SQL> CREATE SEQUENCE JOUEUR_SEQ;

Sequence JOUEUR_SEQ created.

SQL> CREATE SEQUENCE SUIVI_AMITIE_SEQ;

Sequence SUIVI_AMITIE_SEQ created.

SQL> CREATE SEQUENCE SUIVI_RESEAU_SEQ;

Sequence SUIVI_RESEAU_SEQ created.

SQL> @creation_scripts.sql
SQL> REM CREATION DES SCRIPTS
SQL> 
SQL> @scripts/creation_declencheurs.sql
SQL> REM CREATION DES TRIGGERS
SQL> 
SQL> @declencheurs/sequences.sql
SQL> -- triggeur pour JEU
SQL> CREATE TRIGGER JEU_ID_TRG
  2  BEFORE INSERT
  3  ON JEU
  4  FOR EACH ROW
  5  BEGIN
  6      SELECT JEU_SEQ.NEXTVAL
  7      INTO :NEW.IdJeu
  8      FROM DUAL;
  9  END;
 10  /

Trigger JEU_ID_TRG compiled

SQL> -- triggeur pour CONTENU
SQL> CREATE TRIGGER CONTENU_ID_TRG
  2  BEFORE INSERT
  3  ON CONTENU
  4  FOR EACH ROW
  5  BEGIN
  6      SELECT CONTENU_SEQ.NEXTVAL
  7      INTO :NEW.IdContenu
  8      FROM DUAL;
  9  END;
 10  /

Trigger CONTENU_ID_TRG compiled

SQL> -- triggeur pour SUCCES
SQL> CREATE TRIGGER SUCCES_ID_TRG
  2  BEFORE INSERT
  3  ON SUCCES
  4  FOR EACH ROW
  5  BEGIN
  6      SELECT SUCCES_SEQ.NEXTVAL
  7      INTO :NEW.IdSucces
  8      FROM DUAL;
  9  END;
 10  /

Trigger SUCCES_ID_TRG compiled

SQL> -- triggeur pour SUCCES
SQL> CREATE TRIGGER PERIODE_ID_TRG
  2  BEFORE INSERT
  3  ON PERIODE
  4  FOR EACH ROW
  5  BEGIN
  6      SELECT PERIODE_SEQ.NEXTVAL
  7      INTO :NEW.IdPeriode
  8      FROM DUAL;
  9  END;
 10  /

Trigger PERIODE_ID_TRG compiled

SQL> -- triggeur pour SUCCES
SQL> CREATE TRIGGER JOUEUR_ID_TRG
  2  BEFORE INSERT
  3  ON JOUEUR
  4  FOR EACH ROW
  5  BEGIN
  6      SELECT JOUEUR_SEQ.NEXTVAL
  7      INTO :NEW.NoJoueur
  8      FROM DUAL;
  9  END;
 10  /

Trigger JOUEUR_ID_TRG compiled

SQL> -- triggeur pour SUCCES
SQL> CREATE TRIGGER SUIVI_AMITIE_ID_TRG
  2  BEFORE INSERT
  3  ON SUIVI_AMITIE
  4  FOR EACH ROW
  5  BEGIN
  6      SELECT SUIVI_AMITIE_SEQ.NEXTVAL
  7      INTO :NEW.IdSuivi
  8      FROM DUAL;
  9  END;
 10  /

Trigger SUIVI_AMITIE_ID_TRG compiled

SQL> -- triggeur pour SUCCES
SQL> CREATE TRIGGER SUIVI_RESEAU_ID_TRG
  2  BEFORE INSERT
  3  ON SUIVI_RESEAU
  4  FOR EACH ROW
  5  BEGIN
  6      SELECT SUIVI_RESEAU_SEQ.NEXTVAL
  7      INTO :NEW.IdSuivi
  8      FROM DUAL;
  9  END;
 10  /

Trigger SUIVI_RESEAU_ID_TRG compiled

SQL> 
SQL> @declencheurs/nouveauSuccesEnCours.sql 
SQL> CREATE OR REPLACE TRIGGER NOUVEAU_SUCCES_EN_COURS_TRG
  2  BEFORE INSERT
  3  ON SUCCES_EN_COURS
  4  FOR EACH ROW
  5  DECLARE
  6      CURSOR cur_list IS
  7          SELECT IdContenu, NoJoueur, IdSucces
  8          FROM SUCCES_REALISE
  9          WHERE SUCCES_REALISE.IdContenu = :NEW.IdContenu AND SUCCES_REALISE.NoJoueur = :NEW.NoJoueur AND SUCCES_REALISE.IdSucces = :NEW.IdSucces;
 10  
 11      curChoice cur_list%ROWTYPE;
 12  
 13  BEGIN
 14      OPEN cur_list;
 15      FETCH cur_list INTO curChoice;
 16      IF cur_list%FOUND THEN
 17          raise_application_error( -20010, 'Dupicate!' );
 18      END IF;
 19  
 20  END;
 21  /

Trigger NOUVEAU_SUCCES_EN_COURS_TRG compiled

SQL> @declencheurs/genre.sql 
SQL> CREATE OR REPLACE TRIGGER Genre_TRG
  2  BEFORE UPDATE
  3  ON JEU
  4  FOR EACH ROW
  5  DECLARE
  6      Code_Parent GENRE.Code%TYPE;
  7  BEGIN
  8      IF :NEW.CodeGenre != :OLD.CodeGenre THEN
  9          SELECT CodeGenreParent
 10          INTO Code_Parent
 11          FROM GENRE
 12          WHERE Code = :OLD.CodeGenre;        
 13          IF Code_Parent = :OLD.CodeGenre THEN
 14              DELETE 
 15              FROM SOUS_GENRE_JEU
 16              WHERE CodeSousGenre IN
 17                  (SELECT Code
 18                  FROM GENRE
 19                  WHERE CodeGenreParent = :OLD.CodeGenre);        
 20          END IF;
 21      END IF;
 22  END;
 23  /

Trigger GENRE_TRG compiled

SQL> @declencheurs/suiviReseau.sql 
SQL> CREATE OR REPLACE TRIGGER Suivi_Reseau_TRG
  2  AFTER INSERT OR UPDATE
  3  ON RESEAU
  4  FOR EACH ROW
  5  DECLARE
  6      isActif INTEGER;
  7      codeAction SUIVI_RESEAU.Action%TYPE;
  8  BEGIN
  9      IF INSERTING THEN
 10          codeAction := 'CRE';
 11      END IF;
 12  
 13      IF UPDATING THEN
 14          IF :NEW.Actif = '1' THEN
 15              codeAction := 'ACT';
 16          END IF;
 17          IF :NEW.Actif = '0' THEN
 18              codeAction := 'DES';
 19          END IF;
 20      END IF;
 21      INSERT INTO SUIVI_RESEAU(Moment, CodeReseau, DateSuivi, Action, NoJoueur)
 22      VALUES (CURRENT_TIMESTAMP, :NEW.Code, to_date(SYSDATE), codeAction, NULL);  
 23  END;

Trigger SUIVI_RESEAU_TRG compiled

SQL> @declencheurs/suiviAbonnementReseau.sql
SQL> CREATE OR REPLACE TRIGGER SUIVI_ABONNEMENT_RESEAU_TRG
  2  AFTER INSERT OR DELETE
  3  ON ABONNEMENT_RESEAU
  4  FOR EACH ROW
  5  DECLARE
  6      codeAction SUIVI_RESEAU.Action%TYPE;
  7  BEGIN
  8      IF INSERTING THEN
  9          codeAction := 'ABO';
 10          INSERT INTO SUIVI_RESEAU(Moment, CodeReseau, DateSuivi, Action, NoJoueur)
 11          VALUES (CURRENT_TIMESTAMP, :NEW.CodeReseau, to_date(SYSDATE), codeAction, :NEW.NoJoueur);
 12      END IF;
 13  
 14      IF DELETING THEN
 15          codeAction := 'DSA';
 16          INSERT INTO SUIVI_RESEAU(Moment, CodeReseau, DateSuivi, Action, NoJoueur)
 17          VALUES (CURRENT_TIMESTAMP, :OLD.CodeReseau, to_date(SYSDATE), codeAction, :OLD.NoJoueur);
 18      END IF;  
 19  END;

Trigger SUIVI_ABONNEMENT_RESEAU_TRG compiled

SQL> @declencheurs/suiviAmi.sql
SQL> CREATE OR REPLACE TRIGGER Suivi_Ami_TRG
  2  AFTER INSERT OR UPDATE OR DELETE 
  3  ON AMI
  4  FOR EACH ROW
  5  DECLARE
  6  BEGIN
  7      IF INSERTING OR UPDATING THEN
  8          INSERT INTO SUIVI_AMITIE(Moment, NoJoueurInvitant, NoJoueurInvite, DateSuivi, CodeStatut)
  9          VALUES(CURRENT_TIMESTAMP, :NEW.NoJoueurInvitant, :NEW.NoJoueurInvite, to_date(SYSDATE), :NEW.CodeStatut);
 10      END IF;
 11  
 12      IF DELETING THEN
 13          INSERT INTO SUIVI_AMITIE(Moment, NoJoueurInvitant, NoJoueurInvite, DateSuivi, CodeStatut)
 14          VALUES(CURRENT_TIMESTAMP, :OLD.NoJoueurInvitant, :OLD.NoJoueurInvite, to_date(SYSDATE), :OLD.CodeStatut);
 15      END IF;
 16  END;

Trigger SUIVI_AMI_TRG compiled

SQL> @scripts/creation_procedures.sql
SQL> REM CREATION DES PROCEDURES
SQL> 
SQL> @procedures/ajoutForfait.sql
SQL> CREATE OR REPLACE PROCEDURE ajoutForfait(Code       IN FORFAIT.Code%TYPE DEFAULT 'FortF',
  2                                          Nom         IN FORFAIT.Nom%TYPE ,
  3                                          Description IN FORFAIT.Description%TYPE,
  4                                          Prix        IN PERIODE.Prix%TYPE )
  5  IS
  6  BEGIN
  7      INSERT INTO FORFAIT(Code, Nom, Description)
  8          VALUES(Code, Nom, Description); 
  9      INSERT INTO PERIODE (DateDebut, DateFin, Prix, CodeForfait)
 10          VALUES (SYSDATE, ADD_MONTHS(SYSDATE, 12) , Prix, Code);
 11  END;

Procedure AJOUTFORFAIT compiled

SQL> @procedures/prolongationForfait.sql
SQL> CREATE OR REPLACE PROCEDURE prolongationForfait(Code            IN FORFAIT.Code%TYPE DEFAULT 'FortF',
  2                                                  nb_joueur_aff   OUT INTEGER)
  3  IS
  4  BEGIN
  5      UPDATE PERIODE_FORFAIT_JOUEUR
  6      SET DateAchat = ADD_MONTHS(DateAchat,2)
  7      WHERE IdPeriode IN
  8          (select IdPeriode
  9          from PERIODE
 10          where CodeForfait = Code);
 11  
 12      select count (distinct NoJoueur) as Nb_affectes
 13      into nb_joueur_aff
 14      from PERIODE_FORFAIT_JOUEUR
 15      where IdPeriode IN
 16          (select IdPeriode
 17          from PERIODE
 18          where CodeForfait = Code);
 19  
 20      UPDATE PERIODE
 21      SET DateFin = ADD_MONTHS(DateFin,2)
 22      WHERE IdPeriode IN
 23          (select IdPeriode
 24          from PERIODE
 25          where CodeForfait = Code);
 26  END;

Procedure PROLONGATIONFORFAIT compiled

SQL> @procedures/ajusterPromotion.sql
SQL> CREATE OR REPLACE PROCEDURE ajusterPromotion(Code   OUT PERIODE.CodeForfait%TYPE ,
  2                                              new_prix  OUT PERIODE.Prix%TYPE )
  3  IS
  4      forfait_populaire PERIODE.CodeForfait%TYPE;
  5      max_prix PERIODE.Prix%TYPE;
  6  BEGIN
  7      --select max prix
  8      SELECT max(Prix)
  9      INTO max_prix
 10      FROM PERIODE;
 11  
 12      --select le code forfait le plus populaire
 13      SELECT code
 14      INTO forfait_populaire
 15      FROM
 16          (SELECT CodeForfait AS code, count(*) AS count
 17          FROM PERIODE
 18          GROUP BY CodeForfait
 19          ORDER BY count desc)
 20      WHERE rownum = 1;
 21      Code :=  forfait_populaire;
 22  
 23      --update prix pour le code le plus populaire si son prix < max prix
 24      UPDATE PERIODE
 25      SET Prix = Prix * 1.1
 26      WHERE Prix IN
 27          (SELECT Prix
 28          FROM PERIODE 
 29          WHERE CodeForfait = forfait_populaire AND Prix != max_prix);
 30      --select new prix  
 31      SELECT Prix
 32      INTO new_prix
 33      FROM
 34          (SELECT Prix
 35          FROM PERIODE 
 36          WHERE CodeForfait = forfait_populaire 
 37          order by Prix desc)
 38      WHERE rownum = 1;
 39  END;
 40  /

Procedure AJUSTERPROMOTION compiled

SQL> @procedures/suppressionJeu.sql
SQL> CREATE OR REPLACE PROCEDURE suppressionJeu( resultat OUT INTEGER,
  2                                              nomJeu IN JEU.Nom%TYPE)
  3  AS
  4      e1 EXCEPTION;
  5      PRAGMA exception_init(e1, -20001);
  6      e2 EXCEPTION;
  7      PRAGMA exception_init(e2, -20002);
  8      e3 EXCEPTION;
  9      PRAGMA exception_init(e3, -20003);
 10      checkExist INTEGER;
 11      checkAcquisition INTEGER;
 12  BEGIN
 13      --compter le nombre de jeux ayant le meme nom
 14      SELECT COUNT(*)
 15      INTO checkExist
 16      FROM JEU
 17      WHERE Nom = nomJeu;
 18      IF checkExist = 0 THEN
 19          raise_application_error(-20001,'Exception: Jeu inexistant');
 20      END IF;
 21      IF checkExist >= 2 THEN
 22          raise_application_error(-20002,'Plus que 2 jeux ont le meme nom');
 23      END IF;
 24  
 25  
 26      --check si un jouer possede le jeu
 27      SELECT count(*) 
 28      INTO checkAcquisition
 29      FROM (SELECT * FROM CONTENU_POSSEDE
 30            WHERE IdContenu IN
 31              (SELECT IdContenu FROM CONTENU WHERE IdJeu IN
 32                  (SELECT IdJeu FROM JEU WHERE Nom = nomJeu)));
 33      IF checkAcquisition > 0 THEN
 34          raise_application_error(-20003,'Exception: Jouer possede le jeu');
 35      END IF;
 36  
 37      --savepoint 
 38      savepoint saveTest;
 39  
 40      --delete from succes calcule 
 41      DELETE FROM SUCCES_CALCULE
 42      WHERE IdSucces IN 
 43          (SELECT IdSucces FROM SUCCES WHERE IdContenu IN
 44              (SELECT IdContenu FROM CONTENU WHERE IdJeu IN
 45                  (SELECT IdJeu FROM JEU WHERE Nom = nomJeu)));
 46  
 47      --delete from succes
 48      DELETE FROM SUCCES
 49      WHERE IdSucces IN 
 50          (SELECT IdSucces FROM SUCCES WHERE IdContenu IN
 51              (SELECT IdContenu FROM CONTENU WHERE IdJeu IN
 52                  (SELECT IdJeu FROM JEU WHERE Nom = nomJeu)));
 53  
 54      --delete from contenu
 55      DELETE FROM CONTENU
 56      WHERE IdContenu IN
 57          (SELECT IdContenu FROM CONTENU WHERE IdJeu IN
 58              (SELECT IdJeu FROM JEU WHERE Nom = nomJeu));
 59  
 60      --delete from jeu
 61      DELETE FROM JEU
 62      WHERE IdJeu IN 
 63          (SELECT IdJeu FROM JEU WHERE Nom = nomJeu);
 64  
 65  
 66      --resultat = 0 if resussi
 67      resultat := 0;
 68  EXCEPTION
 69      WHEN e1 THEN 
 70          dbms_output.put_line('Handle e1: jeu inexistant');
 71          resultat := 1;
 72      WHEN e2 THEN 
 73          dbms_output.put_line('Handle e2: deux jeux avec le meme nom');
 74          resultat := 2;
 75      WHEN e3 THEN 
 76          dbms_output.put_line('Handle e3: joueur possede le jeu');
 77          resultat := 3;
 78      WHEN OTHERS THEN
 79          dbms_output.put_line('Handle others');
 80          resultat := 4;
 81          rollback to saveTest;
 82  END;    

Procedure SUPPRESSIONJEU compiled

SQL> @scripts/creation_fonctions.sql
SQL> REM CREATION DES FONCTIONS
SQL> 
SQL> @fonctions/succesPlusRealise.sql
SQL> CREATE OR REPLACE FUNCTION succesPlusRealise 
  2  RETURN SUCCES.Titre%TYPE
  3  AS
  4      idSucc SUCCES.IdSucces%TYPE;
  5      titreSucc SUCCES.Titre%TYPE;
  6  BEGIN
  7      SELECT IdSucces
  8      INTO idSucc
  9      FROM
 10          (SELECT IdSucces, count(*) as C
 11          FROM SUCCES_REALISE
 12          GROUP BY IdSucces
 13          ORDER BY C desc)
 14      WHERE rownum = 1;
 15  
 16      SELECT Titre
 17      INTO titreSucc
 18      FROM SUCCES
 19      WHERE IdSucces = idSucc;
 20  
 21      RETURN titreSucc;
 22  
 23  END;

Function SUCCESPLUSREALISE compiled

SQL> @fonctions/validerGenre.sql
SQL> CREATE OR REPLACE FUNCTION validerGenre(codeG IN GENRE.Code%TYPE)
  2  RETURN GENRE.Code%TYPE
  3  AS
  4      e1 EXCEPTION;
  5      PRAGMA exception_init(e1, -20001);
  6      code_return GENRE.Code%TYPE;
  7      checkExist INTEGER;    
  8  BEGIN
  9      --verifier si le code exist ou pas
 10      SELECT count(*)
 11      INTO checkExist
 12      FROM GENRE
 13      WHERE Code = codeG;
 14  
 15      IF checkExist = 0 THEN
 16          raise_application_error(-20001,'Exception: Code inexistant');
 17      END IF;    
 18  
 19      --chercher le code parent
 20      SELECT CodeGenreParent
 21      INTO code_return
 22      FROM GENRE
 23      WHERE Code = codeG;
 24  
 25      RETURN code_return;
 26  END;

Function VALIDERGENRE compiled

SQL> @fonctions/joueurLePlusPopulaire.sql
SQL> SET SERVEROUTPUT ON
SQL> CREATE OR REPLACE FUNCTION joueurLePlusPopulaire
  2  RETURN JOUEUR.Surnom%TYPE
  3  AS
  4     NoJoueurPopulaire JOUEUR.NoJoueur%TYPE;
  5     SurnomJoueurPopulaire JOUEUR.Surnom%TYPE;
  6  BEGIN
  7      --trouver NoJoueur du joueur le plus poplulaire
  8      SELECT Invt
  9      INTO NoJoueurPopulaire
 10      FROM
 11          (SELECT Invt, nb_amis
 12              FROM    
 13                  (SELECT Invt, count(*) AS nb_amis
 14                      FROM
 15                      (SELECT NoJoueurInvitant AS Invt from AMI
 16                      UNION ALL 
 17                      SELECT NoJoueurInvite AS Invte FROM AMI)
 18                      GROUP BY Invt
 19                      ORDER BY nb_amis DESC)
 20              WHERE Invt NOT IN
 21                      (SELECT NoJoueur
 22                          FROM JOUEUR
 23                          WHERE Actif = '0' OR Nom IS NULL OR Prenom IS NULL)
 24              ORDER BY nb_amis DESC)
 25      WHERE rownum = 1;
 26  
 27      --trouver le surnom de ce joueur
 28      SELECT Surnom
 29      INTO SurnomJoueurPopulaire
 30      FROM JOUEUR
 31      WHERE NoJoueur = NoJoueurPopulaire;
 32  
 33      --return le surnom   
 34      RETURN SurnomJoueurPopulaire;
 35  END;

Function JOUEURLEPLUSPOPULAIRE compiled

SQL> @fonctions/jeuLePlusPopulaire.sql
SQL> SET SERVEROUTPUT ON
SQL> CREATE OR REPLACE FUNCTION jeuLePlusPopulaire (Code_ESRB IN JEU.CodeESRB%TYPE )
  2  RETURN JEU.Nom%TYPE
  3  AS
  4      IdJeuESRB JEU.IdJeu%TYPE;
  5      nbContenu INTEGER := 0;
  6      nbTmp INTEGER;
  7      nomJeuRETURN JEU.Nom%TYPE;
  8      nomJeuTmp JEU.Nom%TYPE;
  9      CURSOR jeu_cur
 10      IS 
 11          SELECT IdJeu
 12          FROM JEU
 13          WHERE CodeESRB = Code_ESRB;
 14  BEGIN
 15      --Cursor pour faire un loop check tous les Jeux ayant le code ESRB
 16      OPEN jeu_cur;
 17      LOOP
 18          FETCH jeu_cur INTO IdJeuESRB;
 19          EXIT WHEN jeu_cur%NOTFOUND;
 20          --garder le Nom du Jeu
 21          SELECT Nom
 22          INTO nomJeuTmp
 23          FROM JEU
 24          WHERE IdJeu = IdJeuESRB;
 25  
 26          /*compter nombre de contenu achetes par les joueur actif qui a complete 
 27          au moins un succes*/
 28          SELECT COUNT(*)
 29          INTO nbTmp
 30          FROM
 31              (SELECT DISTINCT *
 32              FROM 
 33                  (SELECT CP.IdContenu, CP.NoJoueur
 34                  FROM CONTENU_POSSEDE CP, SUCCES_REALISE SR
 35                  WHERE CP.IdContenu = SR.IdContenu AND CP.NoJoueur = SR.NoJoueur)
 36              WHERE IdContenu IN
 37                  (SELECT IdContenu
 38                  FROM CONTENU
 39                  WHERE IdJeu = IdJeuESRB)
 40              AND NoJoueur IN 
 41                  (SELECT NoJoueur
 42                  FROM JOUEUR
 43                  WHERE Actif = '1'));
 44          --Verifie si le nombre de vente est le max
 45          IF nbTmp >= nbContenu THEN
 46              nbContenu := nbTmp;
 47              nomJeuRETURN := nomJeuTmp;
 48          END IF;      
 49      END LOOP;
 50      CLOSE jeu_cur;
 51      RETURN nomJeuRETURN;
 52  END;
 53  /

Function JEULEPLUSPOPULAIRE compiled

SQL> @scripts/creation_vues.sql
SQL> REM CREATION DES VUES
SQL> 
SQL> @vues/mesSucces.sql
SQL> CREATE VIEW MesSucces AS
  2      SELECT DISTINCT S.Titre, S.Description, S.Valeur, SR.NoJoueur
  3      FROM SUCCES S, SUCCES_REALISE SR
  4      WHERE S.IdSucces = SR.IdSucces
  5      UNION
  6      SELECT DISTINCT S.Titre, S.Description, S.Valeur, SC.NoJoueur
  7      FROM SUCCES S, SUCCES_EN_COURS SC
  8      WHERE S.IdSucces = SC.IdSucces;

View MESSUCCES created.

SQL> @vues/suivi.sql
SQL> CREATE VIEW suiviReseau AS
  2      SELECT SR.Moment, SR.Action, SR.CodeReseau, R.Nom
  3      FROM SUIVI_RESEAU SR, RESEAU R
  4      WHERE SR.CodeReseau = R.Code AND SR.NoJoueur IS NULL
  5      ORDER BY SR.Moment DESC;

View SUIVIRESEAU created.

SQL> /
SQL> 
SQL> CREATE VIEW suiviReseauJoueur AS
  2      SELECT SR.Moment, SR.Action, SR.CodeReseau, J.Surnom
  3      FROM SUIVI_RESEAU SR, JOUEUR J
  4      WHERE SR.NoJoueur = J.NoJoueur 
  5      ORDER BY SR.Moment DESC;

View SUIVIRESEAUJOUEUR created.

SQL> /
SQL> 
SQL> CREATE VIEW suiviAmitie AS
  2      SELECT SA.Moment, J.Surnom, SA.NoJoueurInvitant, SA.NoJoueurInvite, SA.DateSuivi, SA.CodeStatut
  3      FROM SUIVI_AMITIE SA, JOUEUR J
  4      WHERE SA.NoJoueurInvitant = J.NoJoueur 
  5      ORDER BY SA.Moment DESC;

View SUIVIAMITIE created.

SQL> 
SQL> /
SQL> @creation_donnees.sql
SQL> REM CREATION DES DONNï¿½ES
SQL> 
SQL> INSERT INTO JOUEUR (Courriel, Surnom, Miniature, Nom, Prenom)
  2  	VALUES ('bob@hotmail.com', 'BOB LE JOUEUR', NULL, 'Robert', 'Paquette');

1 row inserted.

SQL> INSERT INTO JOUEUR (Courriel, Surnom, Miniature, Nom, Prenom, Actif)
  2  	VALUES ('fred@outlook.com', 'Fred Y', NULL, NULL, NULL, 0);

1 row inserted.

SQL> INSERT INTO JOUEUR (Courriel, Surnom, Miniature, Nom, Prenom, Actif)
  2  	VALUES ('roger@gmail.com', 'Roger la menace', NULL, 'Roger', 'Tremblay', 1);

1 row inserted.

SQL> INSERT INTO JOUEUR (Courriel, Surnom, Miniature, Nom, Prenom, Actif)
  2  	VALUES ('steve@hotmail.com', 'Steve le pirate', NULL, 'S', 'P', 1);

1 row inserted.

SQL> INSERT INTO JOUEUR (Courriel, Surnom, Miniature, Nom, Prenom, Actif)
  2  	VALUES ('sylvie@outlook.com', 'SILL VI', NULL, NULL, NULL, 1);

1 row inserted.

SQL> INSERT INTO JOUEUR (Courriel, Surnom, Miniature, Nom, Prenom, Actif)
  2  	VALUES ('barbie15@gmail.com', 'Tank Girl', NULL, 'Tank', NULL, 0);

1 row inserted.

SQL> 
SQL> INSERT INTO ESRB (Code, Description)
  2  	VALUES ('E', 'Enfants et adultes');

1 row inserted.

SQL> INSERT INTO ESRB (Code, Description)
  2  	VALUES ('T', 'Adolescents');

1 row inserted.

SQL> INSERT INTO ESRB (Code, Description)
  2  	VALUES ('M', 'Jeunes adultes');

1 row inserted.

SQL> INSERT INTO ESRB (Code, Description)
  2  	VALUES ('A', 'Adultes');

1 row inserted.

SQL> INSERT INTO ESRB (Code, Description)
  2  	VALUES ('R', 'En attente de classement');

1 row inserted.

SQL> 
SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('ACT', 'Action', 'ACT');

1 row inserted.

SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('HOR', 'Horreur', 'HOR');

1 row inserted.

SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('SPT', 'Sport', 'SPT');

1 row inserted.

SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('AVT', 'Aventure', 'ACT');

1 row inserted.

SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('HCK', 'Hack and Slash', 'ACT');

1 row inserted.

SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('SUR', 'Survie', 'HOR');

1 row inserted.

SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('COU', 'Course', 'SPT');

1 row inserted.

SQL> 
SQL> INSERT INTO JEU (Nom, Description, CodeESRB, CodeGenre)
  2  	VALUES ('TOMB RAIDER', 'Les aventures de Lara Croft', 'T', 'ACT');

1 row inserted.

SQL> INSERT INTO JEU (Nom, Description, CodeESRB, CodeGenre)
  2  	VALUES ('Dying Light', 'Survivre dans un monde infestï¿½ de zombie. Bonne nuit!', 'M', 'HOR');

1 row inserted.

SQL> INSERT INTO JEU (Nom, Description, CodeESRB, CodeGenre)
  2  	VALUES ('CANDY CRUSH', 'Le super jeu', 'T', 'HOR');

1 row inserted.

SQL> 
SQL> INSERT INTO SOUS_GENRE_JEU (CodeSousGenre, IdJeu)
  2  	VALUES ('AVT', 1);

1 row inserted.

SQL> INSERT INTO SOUS_GENRE_JEU (CodeSousGenre, IdJeu)
  2  	VALUES ('SUR', 2);

1 row inserted.

SQL> 
SQL> INSERT INTO CONTENU (Nom, Description, DateSortie, TypeContenu, IdJeu)
  2  	VALUES ('Les quï¿½tes principales', 'Les aventures de Lara Croft en Amazonie', to_date('2018-02-03', 'YYYY-MM-DD'), 'J', 1);

1 row inserted.

SQL> INSERT INTO CONTENU (Nom, Description, DateSortie, TypeContenu, IdJeu)
  2  	VALUES ('La quï¿½te secondaire du dragon', 'Les aventures de Lara Croft en Chine', to_date('2018-06-23', 'YYYY-MM-DD'), 'D', 1);

1 row inserted.

SQL> INSERT INTO CONTENU (Nom, Description, DateSortie, TypeContenu, IdJeu)
  2  	VALUES ('La quï¿½te secondaire de l''aigle', 'Les aventures de Lara Croft dans les montagnes', to_date('2018-11-11', 'YYYY-MM-DD'),'D', 1);

1 row inserted.

SQL> INSERT INTO CONTENU (Nom, Description, DateSortie, TypeContenu, IdJeu)
  2  	VALUES ('Ensemble d''exploration', 'ï¿½quipements supplï¿½mentaires pour l''aventure', to_date('2018-12-01', 'YYYY-MM-DD'), 'O', 1);

1 row inserted.

SQL> INSERT INTO CONTENU (Nom, Description, DateSortie, TypeContenu, IdJeu)
  2  	VALUES ('Chicago', 'La ville infestï¿½e de Chicago', to_date('2018-09-09', 'YYYY-MM-DD'), 'J', 2);

1 row inserted.

SQL> INSERT INTO CONTENU (Nom, Description, DateSortie, TypeContenu, IdJeu)
  2  	VALUES ('Niveau1', 'Les 10 premiers niveaux', to_date('2019-01-24', 'YYYY-MM-DD'), 'J', 3);

1 row inserted.

SQL> 
SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (1, 1);

1 row inserted.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (2, 1);

1 row inserted.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (3, 1);

1 row inserted.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (4, 1);

1 row inserted.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (1, 2);

1 row inserted.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (5, 2);

1 row inserted.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (1, 3);

1 row inserted.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (2, 3);

1 row inserted.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (3, 3);

1 row inserted.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (4, 3);

1 row inserted.

SQL> 
SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Survivre', 'Vous avez rï¿½ussi ï¿½ traverser la foret amazonienne', 50, 1);

1 row inserted.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Dï¿½livrance', 'Vous avez rï¿½ussi ï¿½ sauver Kevin', 10, 1);

1 row inserted.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Tenace', 'Rependre le combat aprï¿½s une raclï¿½e', 10, 1);

1 row inserted.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Rusï¿½', 'Rï¿½soudre l''ï¿½nigme du dragon', 20, 2);

1 row inserted.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Agile', 'Rï¿½ussir un vol planï¿½ des hautes falaises', 20, 3);

1 row inserted.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Survivant', 'Survivre la premiï¿½re nuit dans la ville', 50, 5);

1 row inserted.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Mission_1', 'Vaincre le gros mï¿½chant zombie ï¿½ la fin de la mission', 10, 5);

1 row inserted.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Herboriste', 'Recuperer des plantes mï¿½dï¿½cinales', 5, 5);

1 row inserted.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Super bonbonnier', 'Reussir 5X un tableau en 10 secondes', 5, 6);

1 row inserted.

SQL> 
SQL> INSERT INTO SUCCES_CALCULE (IdSucces, MaximumRequis)
  2  	VALUES (8, 10);

1 row inserted.

SQL> INSERT INTO SUCCES_CALCULE (IdSucces, MaximumRequis)
  2  	VALUES (9, 5);

1 row inserted.

SQL> 
SQL> INSERT INTO SUCCES_REALISE (IdContenu, NoJoueur, IdSucces)
  2  	VALUES (1, 1, 1);

1 row inserted.

SQL> INSERT INTO SUCCES_REALISE (IdContenu, NoJoueur, IdSucces)
  2  	VALUES (1, 1, 2);

1 row inserted.

SQL> INSERT INTO SUCCES_REALISE (IdContenu, NoJoueur, IdSucces)
  2  	VALUES (1, 1, 3);

1 row inserted.

SQL> INSERT INTO SUCCES_REALISE (IdContenu, NoJoueur, IdSucces)
  2  	VALUES (1, 2, 1);

1 row inserted.

SQL> INSERT INTO SUCCES_REALISE (IdContenu, NoJoueur, IdSucces)
  2  	VALUES (5, 2, 6);

1 row inserted.

SQL> 
SQL> INSERT INTO SUCCES_EN_COURS (IdContenu, NoJoueur, IdSucces, Compteur)
  2  	VALUES (5, 2, 8, 7);

1 row inserted.

SQL> 
SQL> INSERT INTO FORFAIT (Code, Nom, Description)
  2  	VALUES ('GOLD1', 'XBox Gold' , 'Abonnement pour jouer en ligne et avoir des promotions');

1 row inserted.

SQL> INSERT INTO FORFAIT (Code, Nom, Description)
  2  	VALUES ('PASS1', 'XBox Game Pass' , 'Abonnement pour 100 jeux par mois');

1 row inserted.

SQL> INSERT INTO FORFAIT (Code, Nom, Description)
  2  	VALUES ('STAND', NULL , NULL);

1 row inserted.

SQL> 
SQL> INSERT INTO PERIODE (DateDebut, DateFin, Prix, CodeForfait)
  2  	VALUES (to_date('2019-01-11', 'YYYY-MM-DD'), to_date('2019-12-31', 'YYYY-MM-DD'), 80, 'GOLD1');

1 row inserted.

SQL> INSERT INTO PERIODE (DateDebut, DateFin, Prix, CodeForfait)
  2  	VALUES (to_date('2018-01-11', 'YYYY-MM-DD'), to_date('2018-12-31', 'YYYY-MM-DD'), 90, 'GOLD1');

1 row inserted.

SQL> INSERT INTO PERIODE (DateDebut, DateFin, Prix, CodeForfait)
  2  	VALUES (to_date('2019-06-11', 'YYYY-MM-DD'), to_date('2019-10-31', 'YYYY-MM-DD'), 50, 'PASS1');

1 row inserted.

SQL> INSERT INTO PERIODE (DateDebut, DateFin, Prix, CodeForfait)
  2  	VALUES (to_date('2000-01-01', 'YYYY-MM-DD'), to_date('2030-12-31', 'YYYY-MM-DD'), 0, 'STAND');

1 row inserted.

SQL> 
SQL> INSERT INTO PERIODE_FORFAIT_JOUEUR (IdPeriode, NoJoueur, DateAchat)
  2  	VALUES (1, 1, to_date('2019-06-06', 'YYYY-MM-DD'));

1 row inserted.

SQL> INSERT INTO PERIODE_FORFAIT_JOUEUR (IdPeriode, NoJoueur, DateAchat)
  2  	VALUES (1, 2, to_date('2018-06-06', 'YYYY-MM-DD'));

1 row inserted.

SQL> INSERT INTO PERIODE_FORFAIT_JOUEUR (IdPeriode, NoJoueur, DateAchat)
  2  	VALUES (1, 3, to_date('2019-10-06', 'YYYY-MM-DD'));

1 row inserted.

SQL> INSERT INTO PERIODE_FORFAIT_JOUEUR (IdPeriode, NoJoueur, DateAchat)
  2  	VALUES (1, 4, to_date('2015-02-26', 'YYYY-MM-DD'));

1 row inserted.

SQL> INSERT INTO PERIODE_FORFAIT_JOUEUR (IdPeriode, NoJoueur, DateAchat)
  2  	VALUES (2, 1, to_date('2019-04-04', 'YYYY-MM-DD'));

1 row inserted.

SQL> INSERT INTO PERIODE_FORFAIT_JOUEUR (IdPeriode, NoJoueur, DateAchat)
  2  	VALUES (3, 1, to_date('2019-05-05', 'YYYY-MM-DD'));

1 row inserted.

SQL> 
SQL> INSERT INTO RESEAU (Code, Nom, Description)
  2  	VALUES ('LACKEN', 'Les amis du Lac Kï¿½nogami', 'Bienvenue ï¿½ tous!');

1 row inserted.

SQL> INSERT INTO RESEAU (Code, Nom, Description, Actif)
  2  	VALUES ('UQACBD', 'Le reseau des etudiants du 157', 'Tous les etudiants qui travaillent actuellement sur le PLSQL', 1);

1 row inserted.

SQL> INSERT INTO RESEAU (Code, Nom, Description, Actif)
  2  	VALUES ('FRANCO', 'Le reseau des francophones', 'Ici, pas de Bienvenue-Hi!', 0);

1 row inserted.

SQL> 
SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('LACKEN', 1);

1 row inserted.

SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('UQACBD', 1);

1 row inserted.

SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('FRANCO', 1);

1 row inserted.

SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('FRANCO', 2);

1 row inserted.

SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('FRANCO', 3);

1 row inserted.

SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('UQACBD', 4);

1 row inserted.

SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('UQACBD', 5);

1 row inserted.

SQL> 
SQL> INSERT INTO STATUT_AMITIE (CodeStatut, Description)
  2  	VALUES ('NOU', 'Nouveau ami');

1 row inserted.

SQL> INSERT INTO STATUT_AMITIE (CodeStatut, Description)
  2  	VALUES ('FIN', 'Fin de l''amitiï¿½');

1 row inserted.

SQL> INSERT INTO STATUT_AMITIE (CodeStatut, Description)
  2  	VALUES ('REL', 'Rel. distante seulement');

1 row inserted.

SQL> INSERT INTO STATUT_AMITIE (CodeStatut, Description)
  2  	VALUES ('PRO', 'Rel. professionnelle');

1 row inserted.

SQL> 
SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (1, 2, to_date('2019-06-08', 'YYYY-MM-DD'), 'NOU');

1 row inserted.

SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (1, 6, to_date('2019-06-10', 'YYYY-MM-DD'), 'FIN');

1 row inserted.

SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (2, 3, to_date('2019-01-01', 'YYYY-MM-DD'), 'NOU');

1 row inserted.

SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (2, 4, to_date('2019-02-02', 'YYYY-MM-DD'), 'NOU');

1 row inserted.

SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (2, 5, to_date('2019-03-03', 'YYYY-MM-DD'), 'PRO');

1 row inserted.

SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (6, 2, to_date('2019-04-04', 'YYYY-MM-DD'), 'REL');

1 row inserted.

SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (3, 6, to_date('2019-06-04', 'YYYY-MM-DD'), 'NOU');

1 row inserted.

SQL> 
SQL> spool off
